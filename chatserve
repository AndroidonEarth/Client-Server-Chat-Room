#!/usr/bin/env python2

##
## Program name: chatserve
## Author: Andrew Swaim
## Date: October 2019
## Description: A chat host that waits on a port specified on the command line for 
##     connections from other chat hosts. Once a connection is established, can chat 
##     back and forth with the other host until one of them sends a "\quit" command,
##     in which case the connection is closed but chatserve will remain
##     active waiting for more connections.
##

import sys
import re
from socket import *

MSGLEN = 500

# Function name: run()
# Description: The main function that starts the server
# Pre-conditions: chatserve application is run, specifying a port on the command line
# Post-conditions: chatserve server is running and listening for connections
def run():
    
    if len(sys.argv) != 2:
        sys.exit("Usage: chatserve [port]")

    sock = setup()   # setup the socket connection
    user = getUser() # prompt for a get the user's name
    
    # run indefinitely until a SIGINT is received
    print("Welcome " + user + "!")
    while True:
        print("You are in the waiting room. Waiting for someone to join...")
        
        # a new connection is established
        conn, addr = sock.accept()

        # handshake with client to receive client's name 
        client = conn.recv(11)[:-1] # expect max 10 chars, and remove trailing newline
        conn.send(user)
        print(client + " has joined the chatroom!")

        chat(conn, user, client) # begin chat loop
        conn.close()             # if the chat loop ends, close the connection

# Function name: setup()
# Description: Sets up a TCP socket on the port num specified on the command line and 
#     begins listening
# Pre-conditions: a port number was specified on the command line when the application
#     was started
# Post-conditions: a TCP socket is created on the specified port and begins listening
def setup():

    # python socket programming info from official docs
    # https://docs.python.org/2/howto/sockets.html
    port = sys.argv[1]
    sock = socket(AF_INET, SOCK_STREAM)
    sock.bind((gethostname(), int(port)))
    sock.listen(1)
    return sock

# Function name: getUser()
# Description: Prompts for and gets username, using regex matching for validation of
#     format
# Pre-conditions: None
# Post-conditions: A correctly formatted and validated username is returned
def getUser():

    # python regex info from official docs
    # https://docs.python.org/2/library/re.html
    user = raw_input("Please enter a one word username, up to 10 characters: ")
    regex = re.compile("^[A-Za-z]{1,10}$")
    while not regex.match(user):
        print("Invalid username format")
        user = raw_input("Please enter a one word username, up to 10 characters: ")
    return user

# Function name: chat()
# Description: The main chat loop where the user and client take turns sending messages
#     back and forth with each other until the connection is terminated
# Arguments:
#     conn - the connection that is established with the client when the socket accepted
#         the connection
#     user - the username of the server user
#     client - the username of the client user
# Pre-conditions: A socket accepts a connection with a client and a handshake occurs
#     to retrieve the client username
# Post-conditions: The client or server terminates the connection and the chat ends
def chat(conn, user, client):

    while True:
        message = receive(conn, client).strip()
        if not message or message.lower() == "\quit":
            break
        else:
            print "{}> {}".format(client, message)

        respond(raw_input("{}> ".format(user))[:500])


# Function name: receive()
# Description:
# Pre-conditions: 
# Post-conditions: 
def receive(conn, client):
    chunks = []
    read = 0
    while read < MSGLEN:
        chunk = conn.recv(MSGLEN)
        if not chunk:
            break
        else:
            chunks.append(chunk)
            read += len(chunk)
    return ''.join(chunks)


#########################################################################

if __name__ == "__main__":
    run()
